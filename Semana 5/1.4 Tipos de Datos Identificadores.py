"""
Sistema de Gesti√≥n de Biblioteca Personal
========================================
Este programa permite gestionar una biblioteca personal, donde se pueden
agregar libros, buscar por t√≠tulo o autor, mostrar todos los libros,
y calcular estad√≠sticas b√°sicas de la colecci√≥n.

Autor: Cristian David Chiquimba Mena
Fecha: 23 de Junio 2025
Materia: Programaci√≥n Orientada a Objetos
"""


def agregar_libro(biblioteca, titulo, autor, paginas, leido):
    """
    Agrega un nuevo libro a la biblioteca

    Args:
        biblioteca (list): Lista de libros
        titulo (str): T√≠tulo del libro
        autor (str): Autor del libro
        paginas (int): N√∫mero de p√°ginas
        leido (bool): Estado de lectura del libro
    """
    # Crear diccionario con informaci√≥n del libro
    nuevo_libro = {
        'titulo': titulo,
        'autor': autor,
        'paginas': paginas,
        'leido': leido,
        'id_libro': len(biblioteca) + 1
    }

    biblioteca.append(nuevo_libro)
    print(f"‚úì Libro '{titulo}' agregado exitosamente a la biblioteca.")


def mostrar_todos_libros(biblioteca):
    """
    Muestra todos los libros en la biblioteca

    Args:
        biblioteca (list): Lista de libros
    """
    if not biblioteca:
        print("üìö La biblioteca est√° vac√≠a.")
        return

    print("\nüìö BIBLIOTECA PERSONAL - TODOS LOS LIBROS")
    print("=" * 60)

    for libro in biblioteca:
        estado_lectura = "‚úì Le√≠do" if libro['leido'] else "‚è≥ Pendiente"
        print(f"ID: {libro['id_libro']}")
        print(f"T√≠tulo: {libro['titulo']}")
        print(f"Autor: {libro['autor']}")
        print(f"P√°ginas: {libro['paginas']}")
        print(f"Estado: {estado_lectura}")
        print("-" * 40)


def buscar_libro(biblioteca, termino_busqueda):
    """
    Busca libros por t√≠tulo o autor

    Args:
        biblioteca (list): Lista de libros
        termino_busqueda (str): T√©rmino a buscar

    Returns:
        list: Lista de libros encontrados
    """
    libros_encontrados = []
    termino_minuscula = termino_busqueda.lower()

    for libro in biblioteca:
        titulo_minuscula = libro['titulo'].lower()
        autor_minuscula = libro['autor'].lower()

        if termino_minuscula in titulo_minuscula or termino_minuscula in autor_minuscula:
            libros_encontrados.append(libro)

    return libros_encontrados


def calcular_estadisticas(biblioteca):
    """
    Calcula estad√≠sticas de la biblioteca

    Args:
        biblioteca (list): Lista de libros

    Returns:
        dict: Diccionario con estad√≠sticas
    """
    if not biblioteca:
        return None

    total_libros = len(biblioteca)
    libros_leidos = sum(1 for libro in biblioteca if libro['leido'])
    libros_pendientes = total_libros - libros_leidos
    total_paginas = sum(libro['paginas'] for libro in biblioteca)
    promedio_paginas = total_paginas / total_libros

    # Calcular porcentaje de libros le√≠dos
    porcentaje_leidos = (libros_leidos / total_libros) * 100

    estadisticas = {
        'total_libros': total_libros,
        'libros_leidos': libros_leidos,
        'libros_pendientes': libros_pendientes,
        'total_paginas': total_paginas,
        'promedio_paginas': promedio_paginas,
        'porcentaje_leidos': porcentaje_leidos
    }

    return estadisticas


def mostrar_estadisticas(biblioteca):
    """
    Muestra las estad√≠sticas de la biblioteca

    Args:
        biblioteca (list): Lista de libros
    """
    stats = calcular_estadisticas(biblioteca)

    if stats is None:
        print("üìä No hay estad√≠sticas disponibles - La biblioteca est√° vac√≠a.")
        return

    print("\nüìä ESTAD√çSTICAS DE LA BIBLIOTECA")
    print("=" * 40)
    print(f"Total de libros: {stats['total_libros']}")
    print(f"Libros le√≠dos: {stats['libros_leidos']}")
    print(f"Libros pendientes: {stats['libros_pendientes']}")
    print(f"Total de p√°ginas: {stats['total_paginas']}")
    print(f"Promedio de p√°ginas por libro: {stats['promedio_paginas']:.1f}")
    print(f"Porcentaje de libros le√≠dos: {stats['porcentaje_leidos']:.1f}%")


def mostrar_menu():
    """
    Muestra el men√∫ principal del programa
    """
    print("\nüìö SISTEMA DE GESTI√ìN DE BIBLIOTECA PERSONAL")
    print("=" * 50)
    print("1. Agregar nuevo libro")
    print("2. Mostrar todos los libros")
    print("3. Buscar libro")
    print("4. Ver estad√≠sticas")
    print("5. Salir del programa")
    print("=" * 50)


def obtener_opcion_valida():
    """
    Obtiene una opci√≥n v√°lida del men√∫

    Returns:
        int: Opci√≥n seleccionada por el usuario
    """
    while True:
        try:
            opcion_usuario = int(input("Selecciona una opci√≥n (1-5): "))
            if 1 <= opcion_usuario <= 5:
                return opcion_usuario
            else:
                print("‚ùå Por favor, selecciona una opci√≥n v√°lida (1-5).")
        except ValueError:
            print("‚ùå Por favor, ingresa un n√∫mero v√°lido.")


def main():
    """
    Funci√≥n principal que ejecuta el sistema de gesti√≥n de biblioteca
    """
    # Lista para almacenar todos los libros (estructura de datos principal)
    mi_biblioteca = []

    # Variable de control del programa principal
    programa_ejecutandose = True

    # Mensaje de bienvenida
    print("üéâ ¬°Bienvenido a tu Sistema de Gesti√≥n de Biblioteca Personal!")
    print("Aqu√≠ podr√°s organizar y gestionar tu colecci√≥n de libros.")

    # Agregar algunos libros de ejemplo para demostraci√≥n
    libros_ejemplo = [
        ("Las f√°bulas de Esopo", "Esopo", 280, True),
        ("Las sombras de Grey", "E.L. James", 514, False),
        ("C√°lculo diferencial", "Frank Ayres Jr.", 456, True),
        ("√Ålgebra de Baldor", "Aurelio Baldor", 736, False),
        ("La culpa es de la vaca", "Jaime Lopera", 192, True)
    ]

    print("\nüìö Agregando libros de ejemplo...")
    for titulo, autor, paginas, leido in libros_ejemplo:
        agregar_libro(mi_biblioteca, titulo, autor, paginas, leido)

    # Bucle principal del programa
    while programa_ejecutandose:
        mostrar_menu()
        opcion_seleccionada = obtener_opcion_valida()

        if opcion_seleccionada == 1:
            # Agregar nuevo libro
            print("\nüìñ AGREGAR NUEVO LIBRO")
            print("-" * 25)

            try:
                titulo_nuevo = input("T√≠tulo del libro: ").strip()
                autor_nuevo = input("Autor del libro: ").strip()
                paginas_nuevo = int(input("N√∫mero de p√°ginas: "))

                # Validar que las p√°ginas sean positivas
                if paginas_nuevo <= 0:
                    print("‚ùå El n√∫mero de p√°ginas debe ser positivo.")
                    continue

                # Preguntar si ya fue le√≠do
                respuesta_leido = input("¬øYa le√≠ste este libro? (s/n): ").lower().strip()
                libro_leido = respuesta_leido in ['s', 'si', 's√≠', 'yes', 'y']

                # Validar que los campos no est√©n vac√≠os
                if not titulo_nuevo or not autor_nuevo:
                    print("‚ùå El t√≠tulo y autor no pueden estar vac√≠os.")
                    continue

                agregar_libro(mi_biblioteca, titulo_nuevo, autor_nuevo, paginas_nuevo, libro_leido)

            except ValueError:
                print("‚ùå Error: Ingresa un n√∫mero v√°lido para las p√°ginas.")

        elif opcion_seleccionada == 2:
            # Mostrar todos los libros
            mostrar_todos_libros(mi_biblioteca)

        elif opcion_seleccionada == 3:
            # Buscar libro
            print("\nüîç BUSCAR LIBRO")
            print("-" * 15)
            termino_busqueda = input("Ingresa el t√≠tulo o autor a buscar: ").strip()

            if termino_busqueda:
                resultados_busqueda = buscar_libro(mi_biblioteca, termino_busqueda)

                if resultados_busqueda:
                    print(f"\nüîç RESULTADOS DE B√öSQUEDA PARA: '{termino_busqueda}'")
                    print("=" * 50)

                    for libro in resultados_busqueda:
                        estado_lectura = "‚úì Le√≠do" if libro['leido'] else "‚è≥ Pendiente"
                        print(f"‚Ä¢ {libro['titulo']} - {libro['autor']}")
                        print(f"  P√°ginas: {libro['paginas']} | Estado: {estado_lectura}")
                        print("-" * 30)
                else:
                    print(f"‚ùå No se encontraron libros con el t√©rmino: '{termino_busqueda}'")
            else:
                print("‚ùå Por favor, ingresa un t√©rmino de b√∫squeda v√°lido.")

        elif opcion_seleccionada == 4:
            # Ver estad√≠sticas
            mostrar_estadisticas(mi_biblioteca)

        elif opcion_seleccionada == 5:
            # Salir del programa
            programa_ejecutandose = False
            print("\nüìö ¬°Gracias por usar el Sistema de Gesti√≥n de Biblioteca!")
            print("¬°Sigue leyendo y expandiendo tu conocimiento! üìñ‚ú®")

        # Pausa para que el usuario pueda leer los resultados
        if programa_ejecutandose:
            input("\nPresiona Enter para continuar...")


# Punto de entrada del programa
if __name__ == "__main__":
    main()
